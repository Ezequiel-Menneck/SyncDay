// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package pgstore

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, last_name, email, cellphone, base_salary)
    VALUES ($1, $2, $3, $4, $5)
    RETURNING id, name, last_name, email, cellphone, base_salary
`

type CreateUserParams struct {
	Name       string         `db:"name" json:"name"`
	LastName   string         `db:"last_name" json:"last_name"`
	Email      string         `db:"email" json:"email"`
	Cellphone  pgtype.Text    `db:"cellphone" json:"cellphone"`
	BaseSalary pgtype.Numeric `db:"base_salary" json:"base_salary"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.LastName,
		arg.Email,
		arg.Cellphone,
		arg.BaseSalary,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LastName,
		&i.Email,
		&i.Cellphone,
		&i.BaseSalary,
	)
	return i, err
}

const deleteUserById = `-- name: DeleteUserById :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUserById(ctx context.Context, id int) error {
	_, err := q.db.Exec(ctx, deleteUserById, id)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, name, last_name, email, cellphone, base_salary FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.LastName,
			&i.Email,
			&i.Cellphone,
			&i.BaseSalary,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, last_name, email, cellphone, base_salary FROM users WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LastName,
		&i.Email,
		&i.Cellphone,
		&i.BaseSalary,
	)
	return i, err
}

const updateUserBaseSalary = `-- name: UpdateUserBaseSalary :exec
UPDATE users SET base_salary = $1 WHERE id = $2
`

type UpdateUserBaseSalaryParams struct {
	BaseSalary pgtype.Numeric `db:"base_salary" json:"base_salary"`
	ID         int            `db:"id" json:"id"`
}

func (q *Queries) UpdateUserBaseSalary(ctx context.Context, arg UpdateUserBaseSalaryParams) error {
	_, err := q.db.Exec(ctx, updateUserBaseSalary, arg.BaseSalary, arg.ID)
	return err
}
